name: $(Build.SourceBranch)-$(date:yyyyMMdd)$(rev:.r)

trigger:
  branches:
    include:
      - 'main'
  tags:
   include:
    - '*'

schedules:
  - cron: "0 12 1 * *"
    displayName: Monthly build
    branches:
      include:
        - main
    always: true

resources:
  repositories:
    - repository: templates
      type: github
      name: statisticsnorway/azure-pipelines-templates
      endpoint: statisticsnorway

pool:
  name: 'extended_storage'
  vmImage: 'ubuntu-latest'

variables:
    # Mandatory
    # The fully qualified name of the Docker image e.g. eu.gcr.io/prod-bip/ssb/stratus/am-hello-world
  - name: imageName
    value: 'eu.gcr.io/prod-bip/ssb/s782/rstudio-onprem'

  - name: imageNameNexus
    value: 'nexus.ssb.no:8437/prod-bip/ssb/s782/rstudio-onprem'

    # Mandatory
    # The fully qualified name of the image repository e.g. prod-bip/ssb/stratus/am-hello-world
  - name: repoName
    value: 'prod-bip/ssb/s782/rstudio-onprem'

    # This should be left as default for most cases. Override if you have a particular reason.
  - name: timeBetweenRetriesVulnerabilityScan
    value: '15000'

  - name: imageTagAfterVulnerabilityScan
    value: $(Build.SourceBranchName)-$(Build.SourceVersion)

    # It's unusual to have a Dockerfile named anything else. This may be overridden for those unusual cases.
  - name: Dockerfile
    value: 'docker/rstudio/Dockerfile'

jobs:
  - job: dockerBuildAndDockerPush
    timeoutInMinutes: 150
    pool:
      vmImage: 'ubuntu-latest'
    steps:

      - template: docker/docker-build-image-and-push-to-gcr.yml@templates
        parameters:
          imageName: $(imageName)
          repoName: $(repoName)
          Dockerfile: $(DockerFile)
          timeBetweenRetriesVulnerabilityScan: $(timeBetweenRetriesVulnerabilityScan)
          skipImageVulnerabilityScan: 'true'

      # Need to tag 'latest' image (used by docker-tag-for-production)
      - script: |
          cat $(gcrJsonKey.secureFilePath) | docker login -u _json_key --password-stdin ${{ variables.imageHost }}
          docker pull ${{ variables.imageName }}:imagescan-${{ variables.imageTagAfterVulnerabilityScan }}
          docker tag ${{ variables.imageName }}:imagescan-${{ variables.imageTagAfterVulnerabilityScan }} ${{ variables.imageName }}:latest
          docker push ${{ variables.imageName }}:latest
        displayName: "Retagging latest image"
        condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/main'))
    # Job which pulls the Docker image with the 'latest' tag from GCR, tags this
    # with the git tag, and pushes that back to GCR.
    # The job triggers when any tag was committed to GitHub, which means all tags in
    # the code repo are propagated to the corresponding (newly built) image in GCR.
  - template: docker/docker-tag-for-production.yml@templates
    parameters:
      tagToTag: 'latest'
      gcrImageName: ${{ variables.imageName }}
  
  - job: deployToStaging
    dependsOn: dockerBuildAndDockerPush
    pool:
      name: rstudio-onprem-staging
      demands:
      - agent.name -equals staging-agent-1

    displayName: "Deploying to sl-rstudio-t1 (staging)"
    condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/main'))
    steps:
      - script: |
          set -e
          
          IMAGE=${{ variables.imageNameNexus }}:latest
          
          echo "Pulling $IMAGE"
          docker pull $IMAGE

          echo "Removing dangling images"
          docker image prune --force
          
          REPO="$HOME/rstudio-onprem"
          if ! [ -d "$REPO" ]
          then
              echo "repo $REPO does not exist locally, cloning it."
              git clone https://github.com/statisticsnorway/rstudio-onprem.git $REPO

              mkdir -p $HOME/secrets/statbank-authenticator
              mkdir -p $HOME/cron
              chmod 1777 $HOME/cron
          fi

          cd $REPO
          git stash
          git pull
            
          SERVICE_FILE=/etc/systemd/system/rstudio.service
          if cmp -s -- "$SERVICE_FILE" "$REPO/docker/rstudio/rstudio.service"; then
              echo "Service files are the same, restarting service."
              sudo systemctl restart rstudio.service
          else
              echo "Service file $SERVICE_FILE does not exist or is not equal to the recently pulled one."
              sudo cp "$REPO/docker/rstudio/rstudio.service" "/etc/systemd/system/"
              echo "enabling service."
              sudo systemctl enable rstudio.service
              echo "starting service."
              sudo systemctl start rstudio.service
          fi
  - job: deployToProd_1
    dependsOn: dockerBuildAndDockerPush
    pool:
      name: rstudio-onprem-prod
      demands:
      - agent.name -equals prod-agent-1

    displayName: "Deploying to sl-rstudio-p1 (prod)"
    condition: and(succeeded(), startsWith(variables['Build.SourceBranch'], 'refs/tags/'))
    steps:
      - script: |
          set -e
          REPO="$HOME/rstudio-onprem"
          if ! [ -d "$REPO" ]
          then
              echo "repo $REPO does not exist locally, cloning it."
              git clone https://github.com/statisticsnorway/rstudio-onprem.git $REPO

              mkdir -p $HOME/secrets/statbank-authenticator
              mkdir -p $HOME/cron
              chmod 1777 $HOME/cron
          fi
          
          cd $REPO
          git stash
          git pull

          echo "Getting the latest git tag"
          git fetch --tags

          TAG=`git describe --tags`
          echo "Found tag $TAG"
          sed "s/<TAG>/$TAG/g" docker/rstudio/.env.prod > docker/rstudio/.env
          
          IMAGE=${{ variables.imageNameNexus }}:$TAG
          echo "Pulling $IMAGE"
          docker pull $IMAGE

          echo "Removing dangling images"
          docker image prune --force

          SERVICE_FILE=/etc/systemd/system/rstudio.service
          if cmp -s -- "$SERVICE_FILE" "$REPO/docker/rstudio/rstudio.service"; then
              echo "Service files are the same, restarting service."
              sudo systemctl restart rstudio.service
          else
              echo "Service file $SERVICE_FILE does not exist or is not equal to the recently pulled one."
              sudo cp "$REPO/docker/rstudio/rstudio.service" "/etc/systemd/system/"
              echo "enabling service."
              sudo systemctl enable rstudio.service
              echo "starting service."
              sudo systemctl start rstudio.service
          fi

  - job: deployToProd_2
    dependsOn: dockerBuildAndDockerPush
    pool:
      name: rstudio-onprem-prod
      demands:
      - agent.name -equals prod-agent-2

    displayName: "Deploying to sl-rstudio-p2 (prod)"
    condition: and(succeeded(), startsWith(variables['Build.SourceBranch'], 'refs/tags/'))
    steps:
      - script: |
          set -e
          REPO="$HOME/rstudio-onprem"
          if ! [ -d "$REPO" ]
          then
              echo "repo $REPO does not exist locally, cloning it."
              git clone https://github.com/statisticsnorway/rstudio-onprem.git $REPO

              mkdir -p $HOME/secrets/statbank-authenticator
              mkdir -p $HOME/cron
              chmod 1777 $HOME/cron
          fi
          
          cd $REPO
          git stash
          git pull

          echo "Getting the latest git tag"
          git fetch --tags

          TAG=`git describe --tags`
          echo "Found tag $TAG"
          sed "s/<TAG>/$TAG/g" docker/rstudio/.env.prod > docker/rstudio/.env
          
          IMAGE=${{ variables.imageNameNexus }}:$TAG
          echo "Pulling $IMAGE"
          docker pull $IMAGE

          echo "Removing dangling images"
          docker image prune --force

          SERVICE_FILE=/etc/systemd/system/rstudio.service
          if cmp -s -- "$SERVICE_FILE" "$REPO/docker/rstudio/rstudio.service"; then
              echo "Service files are the same, restarting service."
              sudo systemctl restart rstudio.service
          else
              echo "Service file $SERVICE_FILE does not exist or is not equal to the recently pulled one."
              sudo cp "$REPO/docker/rstudio/rstudio.service" "/etc/systemd/system/"
              echo "enabling service."
              sudo systemctl enable rstudio.service
              echo "starting service."
              sudo systemctl start rstudio.service
          fi
